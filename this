#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Dyadic Eye Tracking Memory Game - Server (Computer A)
Synchronized memory game with gaze sharing between two computers
"""

from psychopy import visual, core, event, data, gui
import socket
import json
import threading
import queue
import time
import random
import numpy as np
import pylink
import os
import sys
from string import ascii_letters, digits

# =============================================================================
# DYADIC COMMUNICATION CLASS
# =============================================================================

class DyadicEyeTrackingServer:
    def __init__(self, server_ip='100.1.1.10', client_ip='100.1.1.11', port=5555, gaze_port=8888):
        self.server_ip = server_ip
        self.client_ip = client_ip
        self.port = port
        self.gaze_port = gaze_port
        self.socket = None
        self.gaze_socket = None
        self.running = False
        self.message_queue = queue.Queue()
        self.gaze_queue = queue.Queue()
        
    def start_server(self):
        """Start the UDP server for dyadic communication"""
        # Main synchronization socket
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 65536)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 65536)
        
        try:
            self.socket.bind((self.server_ip, self.port))
            print(f"Sync server bound to {self.server_ip}:{self.port}")
        except OSError:
            self.socket.bind(('0.0.0.0', self.port))
            print(f"Sync server bound to 0.0.0.0:{self.port}")
            
        self.socket.settimeout(0.01)
        
        # Gaze data socket
        self.gaze_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.gaze_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        try:
            self.gaze_socket.bind((self.server_ip, self.gaze_port))
            print(f"Gaze server bound to {self.server_ip}:{self.gaze_port}")
        except OSError:
            self.gaze_socket.bind(('0.0.0.0', self.gaze_port))
            print(f"Gaze server bound to 0.0.0.0:{self.gaze_port}")
            
        self.gaze_socket.settimeout(0.001)
        
        self.running = True
        
        # Start receiving threads
        self.receive_thread = threading.Thread(target=self._receive_messages)
        self.receive_thread.daemon = True
        self.receive_thread.start()
        
        self.gaze_thread = threading.Thread(target=self._receive_gaze)
        self.gaze_thread.daemon = True
        self.gaze_thread.start()
        
        # Send initial ping
        self.send_message('ping', {'server_ready': True})
        
    def send_message(self, message_type, data=None):
        """Send sync message to client"""
        if not self.socket:
            return False
            
        message = {
            'type': message_type,
            'timestamp': time.perf_counter(),
            'data': data
        }
        
        try:
            message_json = json.dumps(message, separators=(',', ':'))
            self.socket.sendto(message_json.encode('utf-8'), (self.client_ip, self.port))
            return True
        except Exception as e:
            print(f"Error sending message: {e}")
            return False
            
    def send_gaze_data(self, gaze_data):
        """Send gaze data to client for real-time sharing"""
        if not self.gaze_socket:
            return False
            
        try:
            gaze_json = json.dumps(gaze_data, separators=(',', ':'))
            self.gaze_socket.sendto(gaze_json.encode('utf-8'), (self.client_ip, self.gaze_port + 1))
            return True
        except Exception as e:
            return False
            
    def _receive_messages(self):
        """Background message receiving"""
        while self.running:
            try:
                data, addr = self.socket.recvfrom(1024)
                receipt_time = time.perf_counter()
                
                message = json.loads(data.decode('utf-8'))
                message['receipt_time'] = receipt_time
                
                if 'timestamp' in message:
                    message['network_latency'] = (receipt_time - message['timestamp']) * 1000
                
                self.message_queue.put(message)
                
            except socket.timeout:
                continue
            except Exception as e:
                if self.running:
                    print(f"Error receiving: {e}")
                    
    def _receive_gaze(self):
        """Background gaze data receiving"""
        while self.running:
            try:
                data, addr = self.gaze_socket.recvfrom(1024)
                gaze_data = json.loads(data.decode('utf-8'))
                self.gaze_queue.put(gaze_data)
            except socket.timeout:
                continue
            except Exception:
                continue
                    
    def get_message(self, timeout=0):
        """Get message from queue"""
        try:
            return self.message_queue.get(timeout=timeout)
        except queue.Empty:
            return None
            
    def get_gaze_data(self):
        """Get latest gaze data"""
        latest = None
        try:
            while True:
                latest = self.gaze_queue.get_nowait()
        except queue.Empty:
            pass
        return latest
            
    def wait_for_response(self, expected_type, timeout=5):
        """Wait for specific message type"""
        start_time = time.perf_counter()
        while time.perf_counter() - start_time < timeout:
            message = self.get_message(timeout=0.001)
            if message and message.get('type') == expected_type:
                return message
        return None
        
    def precise_sync_send(self, message_type, data=None):
        """Send with precise timing"""
        timestamp = time.perf_counter()
        message = {
            'type': message_type,
            'timestamp': timestamp,
            'data': data
        }
        message_bytes = json.dumps(message, separators=(',', ':')).encode('utf-8')
        self.socket.sendto(message_bytes, (self.client_ip, self.port))
        return timestamp
        
    def close(self):
        """Close communication"""
        self.running = False
        if self.receive_thread:
            self.receive_thread.join(timeout=1)
        if self.gaze_thread:
            self.gaze_thread.join(timeout=1)
        if self.socket:
            self.socket.close()
        if self.gaze_socket:
            self.gaze_socket.close()

# =============================================================================
# EYE TRACKING SETUP
# =============================================================================

def setup_eye_tracker(participant_id, is_dummy=False):
    """Setup EyeLink eye tracker"""
    if is_dummy:
        el_tracker = pylink.EyeLink(None)
        print("Running in DUMMY mode")
    else:
        try:
            el_tracker = pylink.EyeLink("100.1.1.1")
            print("✓ Connected to EyeLink Host")
        except RuntimeError:
            print("Could not connect to tracker, using dummy mode")
            el_tracker = pylink.EyeLink(None)
    
    # Configure tracker
    from EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy
    pylink.openGraphicsEx(EyeLinkCoreGraphicsPsychoPy)
    
    # Set EDF file name
    edf_file = f"dyd{participant_id}.edf"
    el_tracker.openDataFile(edf_file)
    
    # Configure tracking
    el_tracker.sendCommand("add_file_preamble_text 'Dyadic Memory Game'")
    el_tracker.sendCommand("screen_pixel_coords = 0 0 1023 767")
    el_tracker.sendCommand("calibration_type = HV9")
    el_tracker.sendCommand("sampling_rate = 1000")
    
    # Set what data to save
    el_tracker.sendCommand("file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT")
    el_tracker.sendCommand("file_sample_data = LEFT,RIGHT,GAZE,HREF,AREA,GAZERES,STATUS,INPUT")
    
    return el_tracker

# =============================================================================
# MEMORY GAME COMPONENTS
# =============================================================================

def load_conditions():
    """Load experimental conditions"""
    try:
        with open('dyad_conditions.json', 'r') as f:
            data = json.load(f)
            conditions = {'medium': data['top_layouts_array_fixed_16']}
        print("✓ Conditions loaded from dyad_conditions.json")
    except:
        print("Using default conditions")
        conditions = {'medium': [[2, 0, 1, 3, 2, 3, 0, 1, 3, 1, 2, 1, 0, 2, 0, 3]]}
    return conditions

def load_images():
    """Load stimulus images"""
    images = {'face': [], 'limb': [], 'house': [], 'car': []}
    
    category_folders = {'face': 'faces', 'limb': 'limbs', 'house': 'houses', 'car': 'cars'}
    
    for category_key, folder_name in category_folders.items():
        folder_path = os.path.join('stimuli', folder_name)
        if os.path.exists(folder_path):
            for i in range(10):
                image_path = os.path.join(folder_path, f"{folder_name}-{i}.png")
                if os.path.exists(image_path):
                    images[category_key].append(image_path)
        
        if not images[category_key]:
            print(f"No images found for {category_key}, using placeholders")
            for i in range(10):
                images[category_key].append(f"placeholder_{category_key}_{i}")
    
    return images

def create_grid_from_condition(condition_array, win, images):
    """Create 8x8 grid from condition array"""
    grid_stimuli = []
    grid_positions = []
    grid_covers = []
    
    # Category mapping
    CATEGORY_MAP = {0: 'face', 1: 'limb', 2: 'house', 3: 'car'}
    
    # Grid setup - 8x8 physical grid
    physical_grid_size = 8
    scn_width, scn_height = win.size
    
    available_width = scn_width * 0.9
    available_height = scn_height * 0.7  # Leave space for UI
    
    grid_spacing_x = available_width / physical_grid_size
    grid_spacing_y = available_height / physical_grid_size
    grid_spacing = min(grid_spacing_x, grid_spacing_y)
    cell_size = int(grid_spacing * 0.85)
    
    start_x = -(physical_grid_size - 1) * grid_spacing / 2
    start_y = (physical_grid_size - 1) * grid_spacing / 2 - 50  # Offset for UI
    
    # Convert condition to categories
    condition_categories = [CATEGORY_MAP[num] for num in condition_array]
    
    # Select random images for each category
    selected_images = {}
    for category in set(condition_categories):
        selected_images[category] = random.randint(0, len(images[category]) - 1)
    
    # Create 8x8 grid from 4x4 pattern (each becomes 2x2 block)
    for med_row in range(4):
        for med_col in range(4):
            category = condition_categories[med_row * 4 + med_col]
            selected_image_idx = selected_images[category]
            
            # Fill 2x2 block
            for block_row in range(2):
                for block_col in range(2):
                    row = med_row * 2 + block_row
                    col = med_col * 2 + block_col
                    x_pos = start_x + col * grid_spacing
                    y_pos = start_y - row * grid_spacing
                    
                    grid_positions.append((x_pos, y_pos))
                    
                    # Create stimulus
                    if images[category][selected_image_idx].startswith('placeholder_'):
                        category_colors = {'face': 'orange', 'limb': 'green', 'house': 'purple', 'car': 'yellow'}
                        stimulus = visual.Rect(win=win, width=cell_size, height=cell_size,
                                             fillColor=category_colors[category], 
                                             lineColor='white', lineWidth=2, pos=[x_pos, y_pos])
                        text_stim = visual.TextStim(win, text=category[0].upper(), pos=[x_pos, y_pos],
                                                  color='black', height=cell_size//4, bold=True)
                        grid_stimuli.append({'rect': stimulus, 'text': text_stim, 'category': category, 'image_type': 'rect'})
                    else:
                        img_stim = visual.ImageStim(win, image=images[category][selected_image_idx],
                                                  pos=[x_pos, y_pos], size=(cell_size, cell_size))
                        grid_stimuli.append({'image': img_stim, 'category': category, 'image_type': 'image'})
                    
                    # Create cover
                    cover = visual.Rect(win=win, width=cell_size, height=cell_size,
                                      fillColor='gray', lineColor='white', lineWidth=2, pos=[x_pos, y_pos])
                    grid_covers.append(cover)
    
    return grid_stimuli, grid_positions, grid_covers, cell_size

def create_ui_elements(win):
    """Create all UI elements"""
    scn_width, scn_height = win.size
    
    # Status elements
    status_bg = visual.Rect(win=win, width=scn_width*0.9, height=60, 
                           fillColor='darkgreen', lineColor='lightgreen', lineWidth=2,
                           pos=[0, scn_height//2 - 40])
    status_text = visual.TextStim(win, text='', pos=[0, scn_height//2 - 40], 
                                 color='lightgreen', height=12, bold=True)
    
    # Game instructions
    game_instructions = visual.TextStim(win, text='', pos=[0, -scn_height//2 + 100],
                                       color='white', height=18, bold=True, wrapWidth=scn_width*0.9)
    
    # Feedback
    feedback_text = visual.TextStim(win, text='', pos=[0, -scn_height//2 + 50],
                                   color='white', height=24, bold=True)
    
    # Target elements
    target_cover = visual.Rect(win=win, width=70, height=70, fillColor='red', 
                              lineColor='white', lineWidth=3, pos=[0, 0])
    question_mark = visual.TextStim(win, text='?', pos=[0, 0], color='white', 
                                   height=48, bold=True)
    
    # Gaze markers - Local (green) and Remote (blue)
    local_marker = visual.Circle(win=win, radius=20, fillColor='limegreen', 
                                lineColor='darkgreen', lineWidth=2)
    local_sparkle = visual.Circle(win=win, radius=15, fillColor='lightgreen', 
                                 lineColor='white', lineWidth=1)
    remote_marker = visual.Circle(win=win, radius=20, fillColor='deepskyblue', 
                                 lineColor='navy', lineWidth=2)
    remote_sparkle = visual.Circle(win=win, radius=15, fillColor='lightblue', 
                                  lineColor='white', lineWidth=1)
    
    # Legend
    legend_bg = visual.Rect(win=win, width=300, height=120, 
                           fillColor='darkblue', lineColor='lightblue', lineWidth=2,
                           pos=[scn_width//2 - 170, -scn_height//2 + 80])
    legend_text = visual.TextStim(win, text='GREEN: Your gaze\nBLUE: Partner gaze\nF=Face L=Limb\nH=House C=Car',
                                 pos=[scn_width//2 - 170, -scn_height//2 + 80],
                                 color='lightblue', height=12, bold=True)
    
    return {
        'status_bg': status_bg, 'status_text': status_text,
        'game_instructions': game_instructions, 'feedback_text': feedback_text,
        'target_cover': target_cover, 'question_mark': question_mark,
        'local_marker': local_marker, 'local_sparkle': local_sparkle,
        'remote_marker': remote_marker, 'remote_sparkle': remote_sparkle,
        'legend_bg': legend_bg, 'legend_text': legend_text
    }

def update_gaze_display(el_tracker, comm, ui_elements, remote_gaze_data, network_stats):
    """Update both local and remote gaze displays"""
    scn_width, scn_height = 1024, 768  # Default screen size
    
    # Update local gaze
    sample = None
    try:
        sample = el_tracker.getNewestSample()
    except:
        pass
    
    if sample is not None:
        gaze_data = None
        if sample.isRightSample():
            try:
                gaze_data = sample.getRightEye().getGaze()
            except:
                pass
        elif sample.isLeftSample():
            try:
                gaze_data = sample.getLeftEye().getGaze()
            except:
                pass
        
        if gaze_data and gaze_data[0] != pylink.MISSING_DATA:
            # Convert coordinates
            gaze_x = -(gaze_data[0] - scn_width/2 + 50)
            gaze_y = -(scn_height/2 - gaze_data[1] + 200)
            
            # Update local marker
            ui_elements['local_marker'].setPos([gaze_x, gaze_y])
            sparkle_time = core.getTime()
            sparkle_offset = 15 * np.sin(sparkle_time * 3)
            ui_elements['local_sparkle'].setPos([gaze_x + sparkle_offset, gaze_y + sparkle_offset])
            
            # Send gaze data
            comm.send_gaze_data({
                'x': float(gaze_data[0]), 'y': float(gaze_data[1]), 
                'valid': True, 'timestamp': time.time(), 'computer': 'A'
            })
            network_stats['sent'] += 1
    
    # Update remote gaze
    new_gaze = comm.get_gaze_data()
    if new_gaze:
        remote_gaze_data.update(new_gaze)
        network_stats['received'] += 1
    
    if remote_gaze_data.get('valid', False):
        gaze_x = 1.2 * remote_gaze_data['x'] - scn_width/2 + 400 - 60
        gaze_y = scn_height/2 - 1.2 * remote_gaze_data['y'] + 200 - 25
        
        ui_elements['remote_marker'].setPos([gaze_x, gaze_y])
        sparkle_time = core.getTime()
        sparkle_offset = 12 * np.cos(sparkle_time * 3.5)
        ui_elements['remote_sparkle'].setPos([gaze_x + sparkle_offset, gaze_y + sparkle_offset])

def show_msg(win, text, wait_for_keypress=True):
    """Show message dialog"""
    scn_width, scn_height = win.size
    msg_bg = visual.Rect(win, width=scn_width*0.7, height=scn_height*0.6, 
                        fillColor='lightcyan', lineColor='darkgreen', lineWidth=5)
    msg = visual.TextStim(win, text, color='darkgreen', wrapWidth=scn_width*0.6, 
                         height=22, bold=True)
    
    if wait_for_keypress:
        start_time = core.getTime()
        while True:
            current_time = core.getTime()
            pulse = 0.95 + 0.05 * np.sin((current_time - start_time) * 3)
            msg_bg.setSize([scn_width*0.7*pulse, scn_height*0.6*pulse])
            
            win.clearBuffer()
            msg_bg.draw()
            msg.draw()
            win.flip()
            core.wait(0.016)
            
            keys = event.getKeys()
            if keys:
                break
    else:
        win.clearBuffer()
        msg_bg.draw()
        msg.draw()
        win.flip()
    
    win.clearBuffer()
    win.flip()

# =============================================================================
# SCORING FUNCTION
# =============================================================================

def dyadic_memory_scoring(server_resp, client_resp, first_responder, trial_data):
    """
    Scoring: If first responder is correct, both players get +1 point
    """
    target_category = trial_data.get('target_category')
    
    if first_responder == 'server':
        first_response = server_resp
    else:
        first_response = client_resp
    
    if first_response == target_category:
        return {
            'score': 1,
            'success': True,
            'message': f'Correct! First: {first_responder} ({first_response})',
            'first_correct': True
        }
    else:
        return {
            'score': 0,
            'success': False,
            'message': f'Incorrect. First: {first_responder} ({first_response}→{target_category})',
            'first_correct': False
        }

# =============================================================================
# MAIN EXPERIMENT FUNCTION
# =============================================================================

def run_dyadic_memory_experiment():
    """Main experiment function for Server (Computer A)"""
    
    # Get experiment parameters
    exp_info = {
        'participant_A_id': '',
        'session': '001',
        'n_trials': 5,
        'dummy_eye_tracker': True,
        'server_ip': '100.1.1.10',
        'client_ip': '100.1.1.11'
    }
    
    dlg = gui.DlgFromDict(dictionary=exp_info, 
                          title='Dyadic Memory Game - Computer A (Server)')
    if not dlg.OK:
        core.quit()
    
    # Validate participant ID
    participant_id = exp_info['participant_A_id'].rstrip().split('.')[0]
    allowed_char = ascii_letters + digits + '_'
    if not all([c in allowed_char for c in participant_id]) or len(participant_id) > 8:
        print('Invalid participant ID')
        core.quit()
    
    # Initialize communication
    comm = DyadicEyeTrackingServer(
        server_ip=exp_info['server_ip'],
        client_ip=exp_info['client_ip']
    )
    
    # Setup eye tracker
    try:
        el_tracker = setup_eye_tracker(participant_id, exp_info['dummy_eye_tracker'])
        print("✓ Eye tracker initialized")
    except Exception as e:
        print(f"Eye tracker setup failed: {e}")
        core.quit()
    
    # Create window
    win = visual.Window([1024, 768], fullscr=False, winType='pyglet',
                       allowGUI=True, color='black', units='pix')
    
    # Load game data
    conditions = load_conditions()
    images = load_images()
    
    # Create UI elements
    ui_elements = create_ui_elements(win)
    
    # Setup graphics environment for eye tracker
    try:
        from EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy
        genv = EyeLinkCoreGraphicsPsychoPy(el_tracker, win)
        pylink.openGraphicsEx(genv)
    except:
        print("Could not setup EyeLink graphics")
    
    # Network and gaze tracking variables
    remote_gaze_data = {'x': 0, 'y': 0, 'valid': False, 'timestamp': 0}
    network_stats = {'sent': 0, 'received': 0, 'errors': 0}
    
    # Start communication and establish connection
    ui_elements['game_instructions'].text = "Starting communication..."
    ui_elements['game_instructions'].draw()
    win.flip()
    
    comm.start_server()
    
    # Wait for client connection
    ui_elements['game_instructions'].text = "Waiting for Computer B..."
    ui_elements['game_instructions'].draw()
    win.flip()
    
    client_ready = False
    timeout_clock = core.Clock()
    
    while not client_ready and timeout_clock.getTime() < 60:
        if time.perf_counter() % 0.1 < 0.01:
            comm.send_message('ping', {'server_ready': True})
        
        message = comm.get_message(timeout=0.001)
        if message and message.get('type') == 'pong':
            client_ready = True
    
    if not client_ready:
        show_msg(win, "Connection failed!")
        comm.close()
        win.close()
        core.quit()
    
    # Calibration
    show_msg(win, "Connection established!\n\nStarting eye tracker calibration.\n\nPress any key to continue.")
    
    if not exp_info['dummy_eye_tracker']:
        try:
            el_tracker.doTrackerSetup()
            el_tracker.exitCalibration()
            el_tracker.setOfflineMode()
            pylink.msecDelay(500)
        except Exception as e:
            print(f"Calibration error: {e}")
    
    # Ready to start
    show_msg(win, "Calibration complete!\n\nPress SPACE to start the dyadic memory game.")
    event.waitKeys(keyList=['space'])
    
    # Send start signal
    comm.precise_sync_send('start_experiment', {
        'n_trials': exp_info['n_trials'],
        'conditions': conditions
    })
    
    # Wait for acknowledgment
    ack = comm.wait_for_response('ack_start', timeout=3)
    if not ack:
        print("Warning: No acknowledgment from client")
    
    # Start recording
    try:
        el_tracker.startRecording(1, 1, 1, 1)
        pylink.msecDelay(300)
        el_tracker.sendMessage("DYADIC_MEMORY_GAME_START")
        print("✓ Recording started")
    except Exception as e:
        print(f"Recording start error: {e}")
    
    # =============================================================================
    # MAIN EXPERIMENT LOOP
    # =============================================================================
    
    data_log = []
    total_score = 0
    running = True
    
    for trial_num in range(exp_info['n_trials']):
        if not running:
            break
            
        print(f"\n=== TRIAL {trial_num + 1} ===")
        
        # Select condition
        available_conditions = conditions['medium']
        condition_index = trial_num % len(available_conditions)
        selected_condition = available_conditions[condition_index]
        
        # Create grid
        grid_stimuli, grid_positions, grid_covers, cell_size = create_grid_from_condition(
            selected_condition, win, images)
        
        # Select target position and category
        target_position = random.randint(0, 63)
        target_category = grid_stimuli[target_position]['category']
        
        trial_data = {
            'trial_num': trial_num + 1,
            'condition_index': condition_index,
            'condition': selected_condition,
            'target_position': target_position,
            'target_category': target_category
        }
        
        el_tracker.sendMessage(f"TRIAL_{trial_num + 1}_START")
        
        # ========== STAGE 1: STUDY PHASE (10 seconds) ==========
        print("Stage 1: Study Phase")
        
        study_sync_time = comm.precise_sync_send('stage_study', {
            'trial_data': trial_data,
            'stage': 'study',
            'duration': 10.0
        })
        
        sync_ack = comm.wait_for_response('stage_sync_ack', timeout=1)
        sync_latency = sync_ack.get('network_latency', 0) if sync_ack else None
        
        study_start = core.getTime()
        while core.getTime() - study_start < 10.0:
            # Update gaze displays
            update_gaze_display(el_tracker, comm, ui_elements, remote_gaze_data, network_stats)
            
            win.clearBuffer()
            
            # Draw grid
            for stim in grid_stimuli:
                if stim['image_type'] == 'rect':
                    stim['rect'].draw()
                    stim['text'].draw()
                else:
                    stim['image'].draw()
            
            # Draw gaze markers
            ui_elements['local_marker'].draw()
            ui_elements['local_sparkle'].draw()
            if remote_gaze_data.get('valid', False):
                ui_elements['remote_marker'].draw()
                ui_elements['remote_sparkle'].draw()
            
            # Draw UI
            ui_elements['status_bg'].draw()
            time_left = 10.0 - (core.getTime() - study_start)
            ui_elements['status_text'].text = f"Computer A - Trial {trial_num + 1}/{exp_info['n_trials']} - Study Phase - {time_left:.1f}s"
            ui_elements['status_text'].draw()
            
            ui_elements['game_instructions'].text = f"Study the grid carefully! Time remaining: {time_left:.1f}s"
            ui_elements['game_instructions'].draw()
            
            ui_elements['legend_bg'].draw()
            ui_elements['legend_text'].draw()
            
            win.flip()
            core.wait(0.016)
            
            # Check for escape
            keys = event.getKeys(['escape'])
            if 'escape' in keys:
                running = False
                break
        
        if not running:
            break
            
        el_tracker.sendMessage(f"TRIAL_{trial_num + 1}_STUDY_END")
        
        # ========== STAGE 2: RESPONSE PHASE ==========
        print("Stage 2: Response Phase")
        
        response_sync_time = comm.precise_sync_send('stage_response', {
            'trial_data': trial_data,
            'stage': 'response'
        })
        
        sync_ack = comm.wait_for_response('stage_sync_ack', timeout=1)
        
        # Position target cover
        target_pos = grid_positions[target_position]
        ui_elements['target_cover'].setPos(target_pos)
        ui_elements['target_cover'].setSize([cell_size, cell_size])
        ui_elements['question_mark'].setPos(target_pos)
        
        # Response collection
        server_response = None
        client_response = None
        server_rt = None
        client_rt = None
        first_responder = None
        response_received = {'server': False, 'client': False}
        
        response_clock = core.Clock()
        
        while not (response_received['server'] and response_received['client']):
            # Update gaze displays
            update_gaze_display(el_tracker, comm, ui_elements, remote_gaze_data, network_stats)
            
            win.clearBuffer()
            
            # Draw covered grid
            for i, cover in enumerate(grid_covers):
                if i != target_position:
                    cover.draw()
            
            # Draw target cover and question mark
            ui_elements['target_cover'].draw()
            ui_elements['question_mark'].draw()
            
            # Draw gaze markers
            ui_elements['local_marker'].draw()
            ui_elements['local_sparkle'].draw()
            if remote_gaze_data.get('valid', False):
                ui_elements['remote_marker'].draw()
                ui_elements['remote_sparkle'].draw()
            
            # Draw UI
            ui_elements['status_bg'].draw()
            ui_elements['status_text'].text = f"Computer A - Trial {trial_num + 1} - Response Phase"
            ui_elements['status_text'].draw()
            
            server_status = f"Your response: {server_response if server_response else '...'}"
            client_status = f"Partner response: {client_response if client_response else '...'}"
            ui_elements['game_instructions'].text = f"What was at the red position?\nF=Face, L=Limb, H=House, C=Car\n{server_status}\n{client_status}"
            ui_elements['game_instructions'].draw()
            
            ui_elements['legend_bg'].draw()
            ui_elements['legend_text'].draw()
            
            win.flip()
            core.wait(0.016)
            
            # Check for server response
            if not response_received['server']:
                keys = event.getKeys(['f', 'l', 'h', 'c', 'escape'], timeStamped=response_clock)
                if keys:
                    key, rt = keys[0]
                    if key == 'escape':
                        running = False
                        break
                    elif key in ['f', 'l', 'h', 'c']:
                        response_map = {'f': 'face', 'l': 'limb', 'h': 'house', 'c': 'car'}
                        server_response = response_map[key]
                        server_rt = rt
                        response_received['server'] = True
                        
                        if first_responder is None:
                            first_responder = 'server'
                        
                        # Send response to client
                        comm.send_message('response_update', {
                            'responder': 'server',
                            'response': server_response,
                            'rt': server_rt
                        })
            
            # Check for client response
            message = comm.get_message(timeout=0.001)
            if message and message.get('type') == 'response_update':
                data = message['data']
                if data['responder'] == 'client' and not response_received['client']:
                    client_response = data['response']
                    client_rt = data['rt']
                    response_received['client'] = True
                    
                    if first_responder is None:
                        first_responder = 'client'
        
        if not running:
            break
            
        el_tracker.sendMessage(f"TRIAL_{trial_num + 1}_RESPONSES_COLLECTED")
        
        # ========== STAGE 3: FEEDBACK PHASE (3 seconds) ==========
        print("Stage 3: Feedback Phase")
        
        # Calculate score
        score_data = dyadic_memory_scoring(server_response, client_response, first_responder, trial_data)
        total_score += score_data['score']
        
        feedback_sync_time = comm.precise_sync_send('stage_feedback', {
            'trial_data': trial_data,
            'stage': 'feedback',
            'score_data': score_data,
            'total_score': total_score,
            'duration': 3.0
        })
        
        sync_ack = comm.wait_for_response('stage_sync_ack', timeout=1)
        
        feedback_start = core.getTime()
        while core.getTime() - feedback_start < 3.0:
            # Update gaze displays
            update_gaze_display(el_tracker, comm, ui_elements, remote_gaze_data, network_stats)
            
            win.clearBuffer()
            
            # Show correct answer
            if grid_stimuli[target_position]['image_type'] == 'rect':
                grid_stimuli[target_position]['rect'].draw()
                grid_stimuli[target_position]['text'].draw()
            else:
                grid_stimuli[target_position]['image'].draw()
            
            # Draw other covers
            for i, cover in enumerate(grid_covers):
                if i != target_position:
                    cover.draw()
            
            # Draw gaze markers
            ui_elements['local_marker'].draw()
            ui_elements['local_sparkle'].draw()
            if remote_gaze_data.get('valid', False):
                ui_elements['remote_marker'].draw()
                ui_elements['remote_sparkle'].draw()
            
            # Draw UI
            ui_elements['status_bg'].draw()
            ui_elements['status_text'].text = f"Computer A - Trial {trial_num + 1} - Feedback"
            ui_elements['status_text'].draw()
            
            ui_elements['feedback_text'].text = f"{score_data['message']}\nTotal Score: {total_score}/{trial_num + 1}"
            ui_elements['feedback_text'].color = 'green' if score_data['success'] else 'red'
            ui_elements['feedback_text'].draw()
            
            ui_elements['legend_bg'].draw()
            ui_elements['legend_text'].draw()
            
            win.flip()
            core.wait(0.016)
            
            # Check for escape
            keys = event.getKeys(['escape'])
            if 'escape' in keys:
                running = False
                break
        
        # Log trial data
        trial_log = {
            'trial': trial_num + 1,
            'condition_index': condition_index,
            'target_position': target_position,
            'target_category': target_category,
            'server_response': server_response,
            'server_rt': server_rt,
            'client_response': client_response,
            'client_rt': client_rt,
            'first_responder': first_responder,
            'trial_score': score_data['score'],
            'total_score': total_score,
            'sync_latency': sync_latency
        }
        data_log.append(trial_log)
        
        el_tracker.sendMessage(f"TRIAL_{trial_num + 1}_END")
        
        # Brief inter-trial interval
        win.clearBuffer()
        win.flip()
        core.wait(0.5)
    
    # End experiment
    comm.send_message('end_experiment')
    
    try:
        el_tracker.stopRecording()
        el_tracker.sendMessage("DYADIC_MEMORY_GAME_END")
    except:
        pass
    
    # Save data
    import pandas as pd
    df = pd.DataFrame(data_log)
    
    # Create results folder
    results_folder = 'results'
    if not os.path.exists(results_folder):
        os.makedirs(results_folder)
    
    time_str = time.strftime("_%Y_%m_%d_%H_%M", time.localtime())
    session_identifier = f"dyadic_server_{participant_id}{time_str}"
    
    filename = os.path.join(results_folder, f"{session_identifier}.csv")
    df.to_csv(filename, index=False)
    
    # Download EDF file
    try:
        el_tracker.setOfflineMode()
        el_tracker.closeDataFile()
        local_edf = os.path.join(results_folder, f"{session_identifier}.EDF")
        el_tracker.receiveDataFile(f"dyd{participant_id}.edf", local_edf)
        print(f"✓ EDF file saved: {local_edf}")
    except Exception as e:
        print(f"EDF download error: {e}")
    
    # Show final results
    if data_log:
        correct_trials = sum(1 for trial in data_log if trial['trial_score'] > 0)
        accuracy = (correct_trials / len(data_log)) * 100
        avg_rt_server = np.mean([trial['server_rt'] for trial in data_log if trial['server_rt']])
        avg_rt_client = np.mean([trial['client_rt'] for trial in data_log if trial['client_rt']])
        
        results_msg = f"Dyadic Memory Game Complete!\n\n"
        results_msg += f"Team Performance:\n"
        results_msg += f"• Total Score: {total_score}/{len(data_log)} ({accuracy:.1f}%)\n"
        results_msg += f"• Successful Trials: {correct_trials}\n\n"
        results_msg += f"Response Times:\n"
        results_msg += f"• Your Average RT: {avg_rt_server:.2f}s\n"
        results_msg += f"• Partner Average RT: {avg_rt_client:.2f}s\n\n"
        results_msg += f"Network Stats:\n"
        results_msg += f"• Messages Sent: {network_stats['sent']}\n"
        results_msg += f"• Messages Received: {network_stats['received']}\n\n"
        results_msg += f"Data saved to: {filename}\n\n"
        results_msg += f"Press any key to exit"
        
        show_msg(win, results_msg)
    
    # Cleanup
    try:
        el_tracker.close()
    except:
        pass
    comm.close()
    win.close()
    core.quit()

if __name__ == '__main__':
    run_dyadic_memory_experiment()
