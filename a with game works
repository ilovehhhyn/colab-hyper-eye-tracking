#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Optimized Dyadic Study Server (Computer A - IP: 100.1.1.10)
Three-stage task: Dot Display (2s) -> Response -> Feedback (1s)
"""

from psychopy import visual, core, event, data, gui
import socket
import json
import threading
import queue
import time
import struct

class OptimizedDyadUDPServer:
    def __init__(self, server_ip='100.1.1.10', client_ip='100.1.1.11', port=5555):
        """Initialize the optimized UDP server for dyadic communication"""
        self.server_ip = server_ip
        self.client_ip = client_ip
        self.port = port
        self.socket = None
        self.running = False
        self.message_queue = queue.Queue()
        
    def start_server(self):
        """Start the optimized UDP server"""
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        
        # UDP optimizations for low latency
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 65536)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 65536)
        
        # Platform-specific optimizations
        try:
            self.socket.setsockopt(socket.IPPROTO_UDP, socket.UDP_CORK, 0)
        except (AttributeError, OSError):
            pass
        
        try:
            self.socket.setsockopt(socket.IPPROTO_IP, socket.IP_DONTFRAG, 1)
        except (AttributeError, OSError):
            pass
        
        # Bind to address
        try:
            self.socket.bind((self.server_ip, self.port))
            print(f"Bound to {self.server_ip}:{self.port}")
        except OSError as e:
            print(f"Could not bind to {self.server_ip}:{self.port}: {e}")
            try:
                self.socket.bind(('0.0.0.0', self.port))
                print(f"Successfully bound to 0.0.0.0:{self.port}")
            except OSError as e2:
                print(f"Failed to bind: {e2}")
                raise
        
        self.socket.settimeout(0.01)
        self.running = True
        print(f"Optimized UDP Server started")
        
        # Start receiving thread
        self.receive_thread = threading.Thread(target=self._receive_messages)
        self.receive_thread.daemon = True
        self.receive_thread.start()
        
        # Send initial ping
        self.send_message('ping', {'server_ready': True})
        
    def send_message(self, message_type, data=None):
        """Send a UDP message to the client with high precision timing"""
        if not self.socket:
            return False
            
        timestamp = time.perf_counter()
        message = {
            'type': message_type,
            'timestamp': timestamp,
            'data': data
        }
        
        try:
            message_json = json.dumps(message, separators=(',', ':'))
            message_bytes = message_json.encode('utf-8')
            self.socket.sendto(message_bytes, (self.client_ip, self.port))
            return True
        except Exception as e:
            print(f"Error sending message: {e}")
            return False
            
    def _receive_messages(self):
        """Receive UDP messages from client with minimal processing delay"""
        while self.running:
            try:
                data, addr = self.socket.recvfrom(1024)
                receipt_time = time.perf_counter()
                
                message = json.loads(data.decode('utf-8'))
                message['sender_addr'] = addr
                message['receipt_time'] = receipt_time
                
                if 'timestamp' in message:
                    network_latency = (receipt_time - message['timestamp']) * 1000
                    message['network_latency'] = network_latency
                
                self.message_queue.put(message)
                
            except socket.timeout:
                continue
            except Exception as e:
                if self.running:
                    print(f"Error receiving message: {e}")
                    
    def get_message(self, timeout=0):
        """Get a message from the queue"""
        try:
            return self.message_queue.get(timeout=timeout)
        except queue.Empty:
            return None
            
    def wait_for_response(self, expected_type, timeout=5):
        """Wait for a specific type of response from client"""
        start_time = time.perf_counter()
        while time.perf_counter() - start_time < timeout:
            message = self.get_message(timeout=0.001)
            if message and message.get('type') == expected_type:
                return message
        return None
        
    def precise_sync_send(self, message_type, data=None):
        """Send message with precise timing for synchronization"""
        timestamp = time.perf_counter()
        message = {
            'type': message_type,
            'timestamp': timestamp,
            'data': data
        }
        message_bytes = json.dumps(message, separators=(',', ':')).encode('utf-8')
        self.socket.sendto(message_bytes, (self.client_ip, self.port))
        return timestamp
        
    def close(self):
        """Close the server"""
        self.running = False
        if self.receive_thread:
            self.receive_thread.join(timeout=1)
        if self.socket:
            self.socket.close()

def run_experiment():
    """Run the three-stage task experiment on Computer A"""
    
    # Get participant info
    exp_info = {
        'participant_A_id': '',
        'session': '001',
        'server_ip': '100.1.1.10',
        'client_ip': '100.1.1.11',
        'n_trials': 20
    }
    
    dlg = gui.DlgFromDict(dictionary=exp_info, 
                          title='Dyadic Study - Computer A (Server)',
                          order=['participant_A_id', 'session', 'n_trials'])
    if not dlg.OK:
        core.quit()
    
    # Initialize UDP server
    server = OptimizedDyadUDPServer(
        server_ip=exp_info['server_ip'],
        client_ip=exp_info['client_ip'],
        port=5555
    )
    
    # Create window
    win = visual.Window(
        size=[800, 600],
        fullscr=False,
        screen=0,
        winType='pyglet',
        allowGUI=True,
        color=[0, 0, 0],
        units='height',
        waitBlanking=False,
        useFBO=False
    )
    
    # Create stimuli
    instructions = visual.TextStim(win, 
        text="Starting server...", height=0.05)
    
    # Dot display stage
    dot = visual.Circle(win, radius=0.08, fillColor='white', pos=(0, 0))
    stage_text = visual.TextStim(win, text="", height=0.04, pos=(0, -0.3))
    
    # Response stage
    response_prompt = visual.TextStim(win, 
        text="Press A or F", height=0.08, pos=(0, 0))
    your_response = visual.TextStim(win, 
        text="", height=0.05, pos=(0, -0.2), color='yellow')
    other_response = visual.TextStim(win, 
        text="", height=0.05, pos=(0, -0.3), color='cyan')
    
    # Feedback stage
    feedback_text = visual.TextStim(win, 
        text="", height=0.1, pos=(0, 0))
    score_text = visual.TextStim(win, 
        text="", height=0.06, pos=(0, -0.2))
    
    # Status indicators
    status_text = visual.TextStim(win, text="", height=0.03, pos=(0, -0.4))
    latency_text = visual.TextStim(win, text="", height=0.03, pos=(0, 0.4), color='green')
    
    # Start server and establish connection
    instructions.draw()
    win.flip()
    server.start_server()
    
    # Wait for client connection
    instructions.text = "Waiting for Computer B..."
    instructions.draw()
    win.flip()
    
    client_ready = False
    timeout_clock = core.Clock()
    ping_times = []
    
    while not client_ready and timeout_clock.getTime() < 60:
        if time.perf_counter() % 0.1 < 0.01:  # Ping every 100ms
            server.precise_sync_send('ping', {'server_ready': True})
        
        message = server.get_message(timeout=0.001)
        if message and message.get('type') == 'pong':
            client_ready = True
            if 'network_latency' in message:
                ping_times.append(message['network_latency'])
    
    if not client_ready:
        instructions.text = "Connection timeout!"
        instructions.draw()
        win.flip()
        core.wait(3)
        server.close()
        win.close()
        core.quit()
    
    avg_latency = sum(ping_times) / len(ping_times) if ping_times else 0
    
    # Ready to start
    instructions.text = f"Connected! Latency: {avg_latency:.1f}ms\nPress SPACE to start"
    instructions.draw()
    win.flip()
    event.waitKeys(keyList=['space'])
    
    # Send start signal
    server.precise_sync_send('start_experiment', {
        'n_trials': exp_info['n_trials']
    })
    
    # Wait for acknowledgment
    ack = server.wait_for_response('ack_start', timeout=3)
    if not ack:
        print("Warning: No acknowledgment from client")
    
    # Main experiment loop
    n_trials = exp_info['n_trials']
    data_log = []
    total_score = 0
    
    for trial_num in range(n_trials):
        print(f"\n=== TRIAL {trial_num + 1} ===")
        
        # ========== STAGE 1: DOT DISPLAY (2 seconds) ==========
        print("Stage 1: Dot Display")
        
        # Sync start of dot display
        dot_start_time = server.precise_sync_send('stage_dot_display', {
            'trial_number': trial_num + 1,
            'stage': 'dot_display',
            'duration': 2.0
        })
        
        # Wait for client sync ack
        sync_ack = server.wait_for_response('stage_sync_ack', timeout=1)
        sync_latency = sync_ack.get('network_latency', 0) if sync_ack else None
        
        # Display dot for 2 seconds
        stage_clock = core.Clock()
        while stage_clock.getTime() < 2.0:
            dot.draw()
            stage_text.text = f"Trial {trial_num + 1} - Dot Display"
            stage_text.draw()
            if sync_latency:
                latency_text.text = f"Sync: {sync_latency:.1f}ms"
                latency_text.draw()
            win.flip()
            
            # Check for escape
            keys = event.getKeys(['escape'])
            if 'escape' in keys:
                server.send_message('end_experiment')
                server.close()
                win.close()
                core.quit()
        
        # ========== STAGE 2: RESPONSE COLLECTION ==========
        print("Stage 2: Response Collection")
        
        # Sync start of response stage
        response_start_time = server.precise_sync_send('stage_response', {
            'trial_number': trial_num + 1,
            'stage': 'response'
        })
        
        # Wait for client sync ack
        sync_ack = server.wait_for_response('stage_sync_ack', timeout=1)
        
        # Initialize response tracking
        server_response = None
        client_response = None
        server_rt = None
        client_rt = None
        first_responder = None
        first_response = None
        first_rt = None
        
        response_clock = core.Clock()
        response_received = {'server': False, 'client': False}
        
        # Collect responses until both respond
        while not (response_received['server'] and response_received['client']):
            # Display response prompt
            response_prompt.draw()
            your_response.text = f"Your response: {server_response if server_response else '...'}"
            other_response.text = f"Other response: {client_response if client_response else '...'}"
            stage_text.text = f"Trial {trial_num + 1} - Waiting for responses"
            
            your_response.draw()
            other_response.draw()
            stage_text.draw()
            win.flip()
            
            # Check for server (this computer) response
            if not response_received['server']:
                keys = event.getKeys(['a', 'f', 'escape'], timeStamped=response_clock)
                if keys:
                    key, rt = keys[0]
                    if key == 'escape':
                        server.send_message('end_experiment')
                        server.close()
                        win.close()
                        core.quit()
                    elif key in ['a', 'f']:
                        server_response = key.upper()
                        server_rt = rt
                        response_received['server'] = True
                        
                        # Check if this is first response
                        if first_responder is None:
                            first_responder = 'server'
                            first_response = server_response
                            first_rt = server_rt
                        
                        # Send response to client
                        server.send_message('response_update', {
                            'responder': 'server',
                            'response': server_response,
                            'rt': server_rt
                        })
            
            # Check for client response messages
            message = server.get_message(timeout=0.001)
            if message and message.get('type') == 'response_update':
                data = message['data']
                if data['responder'] == 'client' and not response_received['client']:
                    client_response = data['response']
                    client_rt = data['rt']
                    response_received['client'] = True
                    
                    # Check if this is first response
                    if first_responder is None:
                        first_responder = 'client'
                        first_response = client_response
                        first_rt = client_rt
        
        print(f"Responses collected: Server={server_response}, Client={client_response}")
        print(f"First responder: {first_responder} with {first_response}")
        
        # ========== STAGE 3: FEEDBACK (1 second) ==========
        print("Stage 3: Feedback")
        
        # Calculate score
        trial_score = 1 if first_response == 'A' else 0
        total_score += trial_score
        
        # Sync start of feedback stage
        feedback_start_time = server.precise_sync_send('stage_feedback', {
            'trial_number': trial_num + 1,
            'stage': 'feedback',
            'trial_score': trial_score,
            'total_score': total_score,
            'first_responder': first_responder,
            'first_response': first_response,
            'duration': 1.0
        })
        
        # Wait for client sync ack
        sync_ack = server.wait_for_response('stage_sync_ack', timeout=1)
        
        # Display feedback for 1 second
        feedback_clock = core.Clock()
        while feedback_clock.getTime() < 1.0:
            feedback_text.text = f"+{trial_score}"
            feedback_text.color = 'green' if trial_score > 0 else 'red'
            score_text.text = f"Total Score: {total_score}/{trial_num + 1}"
            stage_text.text = f"First: {first_responder} ({first_response})"
            
            feedback_text.draw()
            score_text.draw()
            stage_text.draw()
            win.flip()
        
        # Log trial data
        trial_log = {
            'trial': trial_num + 1,
            'server_response': server_response,
            'server_rt': server_rt,
            'client_response': client_response,
            'client_rt': client_rt,
            'first_responder': first_responder,
            'first_response': first_response,
            'first_rt': first_rt,
            'trial_score': trial_score,
            'total_score': total_score,
            'sync_latency': sync_latency
        }
        data_log.append(trial_log)
        
        # Brief inter-trial interval
        win.flip()
        core.wait(0.5)
    
    # End experiment
    server.send_message('end_experiment')
    
    # Save data
    import pandas as pd
    df = pd.DataFrame(data_log)
    filename = f'dyad_server_{exp_info["participant_A_id"]}_{time.strftime("%Y%m%d_%H%M%S")}.csv'
    df.to_csv(filename, index=False)
    
    # Final results
    final_score_pct = (total_score / n_trials) * 100
    instructions.text = f"Experiment Complete!\n\nFinal Score: {total_score}/{n_trials} ({final_score_pct:.1f}%)\nData saved to {filename}"
    instructions.draw()
    win.flip()
    core.wait(5)
    
    # Cleanup
    server.close()
    win.close()
    core.quit()

if __name__ == '__main__':
    run_experiment()
